import type { RuleTester } from 'eslint';
import { createRuleTester } from '../utils/eslint';

const error = (code: string): RuleTester.InvalidTestCase => ({
  code,
  errors: [{ messageId: 'noChildren' }],
});

const selfClose = (code: string, output: string): RuleTester.InvalidTestCase => ({
  code,
  output,
  errors: [{ messageId: 'mustSelfClose' }],
});

createRuleTester('on-children-in-void-element', {
  valid: [
    '<area />;',
    '<base />;',
    '<br />;',
    '<col />;',
    '<embed />;',
    '<hr />;',
    '<img />;',
    '<input />;',
    '<link />;',
    '<meta />;',
    '<param />;',
    '<source />;',
    '<track />;',
    '<wbr />;',
    '<div>Text</div>;',
    '<div children="foo" />;',
  ],
  invalid: [
    error('<area>foo</area>;'),
    error('<area children="foo" />;'),
    error('<area children={bar} />;'),
    selfClose('<area></area>;', '<area />;'),
    error('<base>foo</base>;'),
    error('<base children="foo" />;'),
    error('<base children={bar} />;'),
    selfClose('<base></base>;', '<base />;'),
    error('<br>foo</br>;'),
    error('<br children="foo" />;'),
    error('<br children={bar} />;'),
    selfClose('<br></br>;', '<br />;'),
    error('<col>foo</col>;'),
    error('<col children="foo" />;'),
    error('<col children={bar} />;'),
    selfClose('<col></col>;', '<col />;'),
    error('<embed>foo</embed>;'),
    error('<embed children="foo" />;'),
    error('<embed children={bar} />;'),
    selfClose('<embed></embed>;', '<embed />;'),
    error('<hr>foo</hr>;'),
    error('<hr children="foo" />;'),
    error('<hr children={bar} />;'),
    selfClose('<hr></hr>;', '<hr />;'),
    error('<img>foo</img>;'),
    error('<img children="foo" />;'),
    error('<img children={bar} />;'),
    selfClose('<img></img>;', '<img />;'),
    error('<input>foo</input>;'),
    error('<input children="foo" />;'),
    error('<input children={bar} />;'),
    selfClose('<input></input>;', '<input />;'),
    error('<link>foo</link>;'),
    error('<link children="foo" />;'),
    error('<link children={bar} />;'),
    selfClose('<link></link>;', '<link />;'),
    error('<meta>foo</meta>;'),
    error('<meta children="foo" />;'),
    error('<meta children={bar} />;'),
    selfClose('<meta></meta>;', '<meta />;'),
    error('<param>foo</param>;'),
    error('<param children="foo" />;'),
    error('<param children={bar} />;'),
    selfClose('<param></param>;', '<param />;'),
    error('<source>foo</source>;'),
    error('<source children="foo" />;'),
    error('<source children={bar} />;'),
    selfClose('<source></source>;', '<source />;'),
    error('<track>foo</track>;'),
    error('<track children="foo" />;'),
    error('<track children={bar} />;'),
    selfClose('<track></track>;', '<track />;'),
    error('<wbr>foo</wbr>;'),
    error('<wbr children="foo" />;'),
    error('<wbr children={bar} />;'),
    selfClose('<wbr></wbr>;', '<wbr />;'),
  ],
});
